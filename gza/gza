#!/bin/bash
# 
# gza -- given a malware directory, play some games!
#

KVM_IMG=/home/ynadji/win-xp.qcow
WORKSPACE=/home/ynadji/nxdomain/ruby/workspaces
KVM_DIR=/home/ynadji/nxdomain/ruby
nfq_count=0
KVM_NETWORKS="192.168.0.0/16"
KVM_NET_PREFIX="192.168"
TAP_PREFIX="tap"
DOCROOT="var/www"
LOGFILE="var/log/http.log"
STAGE1=/home/ynadji/nxdomain/ruby/stages/stage1.rb

# VM identifiers
VANILLA=0
DNS=1
TCP=2
DNSw=3
DNS5=4

iptables_init() {
  echo "initializing iptables for masquerading..."
  sudo iptables -t nat -A POSTROUTING -s $KVM_NETWORKS -o eth0 -j MASQUERADE

  echo "dns game iptables init"
  sudo iptables -A FORWARD -d $KVM_NET_PREFIX.$DNS.0/24 -m udp -p udp -j NFQUEUE --queue-num $DNS

  echo "tcp game iptables init"
  sudo iptables -A FORWARD -d $KVM_NET_PREFIX.$TCP.0/24 -m tcp -p tcp -j NFQUEUE --queue-num $TCP

  echo "dnsw game iptables init"
  sudo iptables -A FORWARD -d $KVM_NET_PREFIX.$DNSw.0/24 -m udp -p udp -j NFQUEUE --queue-num $DNSw

  echo "dns-five game iptables init"
  sudo iptables -A FORWARD -d $KVM_NET_PREFIX.$DNS5.0/24 -m udp -p udp -j NFQUEUE --queue-num $DNS5

}

iptables_teardown() {
  echo "iptables masquerading teardown..."
  sudo iptables -t nat -D POSTROUTING -s $KVM_NETWORKS -o eth0 -j MASQUERADE

  echo "dns game iptables teardown"
  sudo iptables -D FORWARD -d $KVM_NET_PREFIX.$DNS.0/24 -m udp -p udp -j NFQUEUE --queue-num $DNS

  echo "tcp game iptables init"
  sudo iptables -D FORWARD -d $KVM_NET_PREFIX.$TCP.0/24 -m tcp -p tcp -j NFQUEUE --queue-num $TCP

  echo "dnsw game iptables teardown"
  sudo iptables -D FORWARD -d $KVM_NET_PREFIX.$DNSw.0/24 -m udp -p udp -j NFQUEUE --queue-num $DNSw

  echo "dns-five game iptables teardown"
  sudo iptables -D FORWARD -d $KVM_NET_PREFIX.$DNS5.0/24 -m udp -p udp -j NFQUEUE --queue-num $DNS5
}

httpd_launch() {
  sudo thttpd -D -T "utf-8" -d $DOCROOT -p 8080 -l $LOGROOT
}

httpd_teardown() {
  sudo pkill thttpd
}

kvm_launch() {
  echo "kvms launching..."
  (cd $KVM_DIR && sudo ruby kvm.rb -w $WORKSPACE $KVM_IMG) &
  (cd $KVM_DIR && sudo ruby kvm.rb -w $WORKSPACE $KVM_IMG) &
  (cd $KVM_DIR && sudo ruby kvm.rb -w $WORKSPACE $KVM_IMG) &
  (cd $KVM_DIR && sudo ruby kvm.rb -w $WORKSPACE $KVM_IMG) &
  (cd $KVM_DIR && sudo ruby kvm.rb -w $WORKSPACE $KVM_IMG) &
}

kvm_kill() {
  # kill ruby kvm.rb
  sudo pkill -INT ruby
}

reset_netlink() {
  echo "resetting nfnetlink_queue"
  sudo pkill python
  sleep 5
  sudo rmmod nfnetlink_queue
  sleep 5
  sudo modprobe nfnetlink_queue
  sleep 5
}

teardown() {
  iptables_teardown
  kvm_kill
}

copy_stage1() {
  sudo cp -vf $STAGE1 $WORKSPACE/0$VANILLA/$DOCROOT
  sudo cp -vf $STAGE1 $WORKSPACE/0$DNS/$DOCROOT
  sudo cp -vf $STAGE1 $WORKSPACE/0$TCP/$DOCROOT
  sudo cp -vf $STAGE1 $WORKSPACE/0$DNSw/$DOCROOT
}

delayed_kvm_kill() {
  sleep $1
  kvm_kill
  sleep 10
}

copy_sample() {
  sample=$1
  # just the file name
  sudo sh -c "echo '`basename $sample`' > $WORKSPACE/0$VANILLA/$DOCROOT/sample"
  sudo sh -c "echo '`basename $sample`' > $WORKSPACE/0$DNS/$DOCROOT/sample"
  sudo sh -c "echo '`basename $sample`' > $WORKSPACE/0$TCP/$DOCROOT/sample"
  sudo sh -c "echo '`basename $sample`' > $WORKSPACE/0$DNSw/$DOCROOT/sample"

  # actual malware
  sudo cp -vf $sample $WORKSPACE/0$VANILLA/$DOCROOT
  sudo cp -vf $sample $WORKSPACE/0$DNS/$DOCROOT
  sudo cp -vf $sample $WORKSPACE/0$TCP/$DOCROOT
  sudo cp -vf $sample $WORKSPACE/0$DNSw/$DOCROOT
}

if [ $# -ne 3 ]
then
  echo "usage: ./gza MALDIR TCPDUMPDIR TIME"
  exit 1
fi

# ensure it's clean
teardown 2> /dev/null

MALDIR=$1
TCPDUMPDIR=$2
TIME=$3

# iptables
iptables_init 
sleep 4

for sample in $MALDIR/*
do
  # launch KVM sessions
  kvm_launch
  TIMESTAMP=`date +%Y%m%d_-_%H:%M:%S`

  sleep 10

  # copy sample, this will eventually be a loop
  echo "copying malware sample: $sample..."
  copy_sample $sample
  copy_stage1
  sleep 5

  ## launch game strategies
  sudo tcpdump -i "$TAP_PREFIX$VANILLA" -w $TCPDUMPDIR/$TIMESTAMP-`basename $sample`-vanilla.pcap &

  sudo python dns.py $DNS &
  sudo tcpdump -i "$TAP_PREFIX$DNS" -w $TCPDUMPDIR/$TIMESTAMP-`basename $sample`-dns.pcap &
  
  sudo python tcp.py $TCP &
  sudo tcpdump -i "$TAP_PREFIX$TCP" -w $TCPDUMPDIR/$TIMESTAMP-`basename $sample`-tcp.pcap &

  sudo python dns-whitelist.py $DNSw &
  sudo tcpdump -i "$TAP_PREFIX$DNSw" -w $TCPDUMPDIR/$TIMESTAMP-`basename $sample`-dns-whitelist.pcap &
  
  sudo python dns-five.py $DNS5 &
  sudo tcpdump -i "$TAP_PREFIX$DNS5" -w $TCPDUMPDIR/$TIMESTAMP-`basename $sample`-dns-five.pcap &
  
  echo "beginning delayed kvm kill..."
  delayed_kvm_kill $TIME

  echo "killing tcpdump..."
  sudo pkill tcpdump
  sleep 5

  echo "sample $sample analysis complete. waiting for nfqueue to empty."
  reset_netlink
  sleep 15
done

# iptables cleanup
iptables_teardown
sleep 10
